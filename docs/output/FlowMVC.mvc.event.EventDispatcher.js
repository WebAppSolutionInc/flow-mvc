Ext.data.JsonP.FlowMVC_mvc_event_EventDispatcher({"extends":"Ext.util.Observable","uses":[],"subclasses":[],"superclasses":["Ext.util.Observable"],"component":false,"tagname":"class","meta":{},"code_type":"ext_define","requires":[],"mixedInto":[],"html":"<div><pre class=\"hierarchy\"><h4>Hierarchy</h4><div class='subclass first-child'>Ext.util.Observable<div class='subclass '><strong>FlowMVC.mvc.event.EventDispatcher</strong></div></div><h4>Files</h4><div class='dependency'><a href='source/EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher' target='_blank'>EventDispatcher.js</a></div></pre><div class='doc-contents'><p>The main purpose of this class is to provide loosely coupled object communication by wrapping\nthe application-level event bus using simple, helper methods for adding, removing, and dispatching events:</p>\n\n<p>addGlobalEventListener(type, handler, scope)\ndispatchGlobalEvent(event, args)\nremoveGlobalEventListener()</p>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static Properties</h3><div id='property-logger' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='FlowMVC.mvc.event.EventDispatcher'>FlowMVC.mvc.event.EventDispatcher</span><br/><a href='source/EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher-property-logger' target='_blank' class='view-source'>view source</a></div><a href='#!/api/FlowMVC.mvc.event.EventDispatcher-property-logger' class='name not-expandable'>logger</a><span> : Object</span><strong class='static signature' >static</strong></div><div class='description'><div class='short'><p>The logger for the object.</p>\n</div><div class='long'><p>The logger for the object.</p>\n</div></div></div></div></div><div class='members-section'><div class='definedBy'>Defined By</div><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div id='method-addGlobalEventListener' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='FlowMVC.mvc.event.EventDispatcher'>FlowMVC.mvc.event.EventDispatcher</span><br/><a href='source/EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher-method-addGlobalEventListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/FlowMVC.mvc.event.EventDispatcher-method-addGlobalEventListener' class='name expandable'>addGlobalEventListener</a>( <span class='pre'>type, handler, scope</span> )</div><div class='description'><div class='short'>Creates an event handler for a given event dispatched on the application-level event bus. ...</div><div class='long'><p>Creates an event handler for a given event dispatched on the application-level event bus. Facilitates\ninter-controller communication.</p>\n\n<h2>Example</h2>\n\n<p>this.addGlobalEventListener(CafeTownsend.event.AuthenticationEvent.LOGIN, this.onLogin, this);</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : String/String[]/Object<div class='sub-desc'><p>The name or type of the event to listen for. May also be an object who's property names are\nevent names. If the event being dispatched extends <a href=\"#!/api/FlowMVC.mvc.event.AbstractEvent\" rel=\"FlowMVC.mvc.event.AbstractEvent\" class=\"docClass\">FlowMVC.mvc.event.AbstractEvent</a>, the types for the event\nshould be defined as static properties of the event itself.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The name or type of the event to listen for. May also be an object who's property names are\nevent names.</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>This one is important so the handler fires in the correct scope.</p>\n</div></li></ul></div></div></div><div id='method-dispatchGlobalEvent' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='FlowMVC.mvc.event.EventDispatcher'>FlowMVC.mvc.event.EventDispatcher</span><br/><a href='source/EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher-method-dispatchGlobalEvent' target='_blank' class='view-source'>view source</a></div><a href='#!/api/FlowMVC.mvc.event.EventDispatcher-method-dispatchGlobalEvent' class='name expandable'>dispatchGlobalEvent</a>( <span class='pre'>event, args</span> ) : Boolean</div><div class='description'><div class='short'>Allows for inter-controller communication by dispatching events on the application-level event bus. ...</div><div class='long'><p>Allows for inter-controller communication by dispatching events on the application-level event bus.</p>\n\n<p>Wrapper method for <code>this.getApplication().fireEvent(eventName, args);</code></p>\n\n<h2>Example</h2>\n\n<p>var evt = Ext.create(\"CafeTownsend.event.AuthenticationEvent\", CafeTownsend.event.AuthenticationEvent.LOGIN, username, password);\nthis.dispatchGlobalEvent(evt);</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>event</span> : <a href=\"#!/api/FlowMVC.mvc.event.AbstractEvent\" rel=\"FlowMVC.mvc.event.AbstractEvent\" class=\"docClass\">FlowMVC.mvc.event.AbstractEvent</a>/Object/String<div class='sub-desc'><p>The event object to fire containing\na property called 'type' or a string representing the event name or type.</p>\n</div></li><li><span class='pre'>args</span> : Object...<div class='sub-desc'><p>Variable number of parameters are passed to handlers. Optional and not usually used if\ndispatching an event that subclasses <a href=\"#!/api/FlowMVC.mvc.event.AbstractEvent\" rel=\"FlowMVC.mvc.event.AbstractEvent\" class=\"docClass\">FlowMVC.mvc.event.AbstractEvent</a>.</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Returns <code>false</code> if any of the handlers return <code>false</code>, otherwise it returns <code>true</code>.</p>\n</div></li></ul></div></div></div><div id='method-removeGlobalEventListener' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='FlowMVC.mvc.event.EventDispatcher'>FlowMVC.mvc.event.EventDispatcher</span><br/><a href='source/EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher-method-removeGlobalEventListener' target='_blank' class='view-source'>view source</a></div><a href='#!/api/FlowMVC.mvc.event.EventDispatcher-method-removeGlobalEventListener' class='name expandable'>removeGlobalEventListener</a>( <span class='pre'>type, handler, scope</span> )</div><div class='description'><div class='short'>Removes an event handler for a given event dispatched on the application-level event bus. ...</div><div class='long'><p>Removes an event handler for a given event dispatched on the application-level event bus.</p>\n\n<h2>Example</h2>\n\n<p>this.removeGlobalEventListener(CafeTownsend.event.AuthenticationEvent.LOGIN, this.onLogin, this);</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>type</span> : String/String[]/Object<div class='sub-desc'><p>The name or type of the event to listen for. May also be an object who's property names are\nevent names. If the event being dispatched extends <a href=\"#!/api/FlowMVC.mvc.event.AbstractEvent\" rel=\"FlowMVC.mvc.event.AbstractEvent\" class=\"docClass\">FlowMVC.mvc.event.AbstractEvent</a>, the types for the event\nshould be defined as static properties of the event itself.</p>\n</div></li><li><span class='pre'>handler</span> : Function<div class='sub-desc'><p>The name or type of the event to listen for. May also be an object who's property names are\nevent names.</p>\n</div></li><li><span class='pre'>scope</span> : Object<div class='sub-desc'><p>This one is important so the handler fires in the correct scope.</p>\n</div></li></ul></div></div></div></div></div></div></div>","parentMixins":[],"files":[{"href":"EventDispatcher.html#FlowMVC-mvc-event-EventDispatcher","filename":"EventDispatcher.js"}],"linenr":18,"inheritable":null,"members":{"cfg":[],"css_var":[],"property":[],"method":[{"meta":{},"tagname":"method","owner":"FlowMVC.mvc.event.EventDispatcher","name":"addGlobalEventListener","id":"method-addGlobalEventListener"},{"meta":{},"tagname":"method","owner":"FlowMVC.mvc.event.EventDispatcher","name":"dispatchGlobalEvent","id":"method-dispatchGlobalEvent"},{"meta":{},"tagname":"method","owner":"FlowMVC.mvc.event.EventDispatcher","name":"removeGlobalEventListener","id":"method-removeGlobalEventListener"}],"event":[],"css_mixin":[]},"singleton":false,"override":null,"mixins":[],"private":null,"statics":{"cfg":[],"css_var":[],"property":[{"meta":{"static":true},"tagname":"property","owner":"FlowMVC.mvc.event.EventDispatcher","name":"logger","id":"property-logger"}],"method":[],"event":[],"css_mixin":[]},"name":"FlowMVC.mvc.event.EventDispatcher","enum":null,"html_meta":{},"id":"class-FlowMVC.mvc.event.EventDispatcher","alternateClassNames":[],"aliases":{},"inheritdoc":null});